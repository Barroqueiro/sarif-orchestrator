{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "CVE-2018-1000656",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-flask: Denial of Service via crafted JSON file"
              },
              "fullDescription": {
                "text": "The Pallets Project flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3. NOTE: this may overlap CVE-2019-1010083."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-1000656",
              "help": {
                "text": "Vulnerability CVE-2018-1000656\nSeverity: HIGH\nPackage: Flask\nFixed Version: 0.12.3\nLink: [CVE-2018-1000656](https://avd.aquasec.com/nvd/cve-2018-1000656)\nThe Pallets Project flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3. NOTE: this may overlap CVE-2019-1010083.",
                "markdown": "**Vulnerability CVE-2018-1000656**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Flask|0.12.3|[CVE-2018-1000656](https://avd.aquasec.com/nvd/cve-2018-1000656)|\n\nThe Pallets Project flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3. NOTE: this may overlap CVE-2019-1010083."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2019-1010083",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-flask: unexpected memory usage can lead to denial of service via crafted encoded JSON data"
              },
              "fullDescription": {
                "text": "The Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1. NOTE: this may overlap CVE-2018-1000656."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-1010083",
              "help": {
                "text": "Vulnerability CVE-2019-1010083\nSeverity: HIGH\nPackage: Flask\nFixed Version: 1.0\nLink: [CVE-2019-1010083](https://avd.aquasec.com/nvd/cve-2019-1010083)\nThe Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1. NOTE: this may overlap CVE-2018-1000656.",
                "markdown": "**Vulnerability CVE-2019-1010083**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Flask|1.0|[CVE-2019-1010083](https://avd.aquasec.com/nvd/cve-2019-1010083)|\n\nThe Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1. NOTE: this may overlap CVE-2018-1000656."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2019-10906",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-jinja2: str.format_map allows sandbox escape"
              },
              "fullDescription": {
                "text": "In Pallets Jinja before 2.10.1, str.format_map allows a sandbox escape."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-10906",
              "help": {
                "text": "Vulnerability CVE-2019-10906\nSeverity: HIGH\nPackage: Jinja2\nFixed Version: 2.10.1\nLink: [CVE-2019-10906](https://avd.aquasec.com/nvd/cve-2019-10906)\nIn Pallets Jinja before 2.10.1, str.format_map allows a sandbox escape.",
                "markdown": "**Vulnerability CVE-2019-10906**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Jinja2|2.10.1|[CVE-2019-10906](https://avd.aquasec.com/nvd/cve-2019-10906)|\n\nIn Pallets Jinja before 2.10.1, str.format_map allows a sandbox escape."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "8.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-28493",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-jinja2: ReDoS vulnerability in the urlize filter"
              },
              "fullDescription": {
                "text": "This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-28493",
              "help": {
                "text": "Vulnerability CVE-2020-28493\nSeverity: MEDIUM\nPackage: Jinja2\nFixed Version: 2.11.3\nLink: [CVE-2020-28493](https://avd.aquasec.com/nvd/cve-2020-28493)\nThis affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory.",
                "markdown": "**Vulnerability CVE-2020-28493**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Jinja2|2.11.3|[CVE-2020-28493](https://avd.aquasec.com/nvd/cve-2020-28493)|\n\nThis affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-29217",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-jwt: Key confusion through non-blocklisted public key formats"
              },
              "fullDescription": {
                "text": "PyJWT is a Python implementation of RFC 7519. PyJWT supports multiple different JWT signing algorithms. With JWT, an attacker submitting the JWT token can choose the used signing algorithm. The PyJWT library requires that the application chooses what algorithms are supported. The application can specify `jwt.algorithms.get_default_algorithms()` to get support for all algorithms, or specify a single algorithm. The issue is not that big as `algorithms=jwt.algorithms.get_default_algorithms()` has to be used. Users should upgrade to v2.4.0 to receive a patch for this issue. As a workaround, always be explicit with the algorithms that are accepted and expected when decoding."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-29217",
              "help": {
                "text": "Vulnerability CVE-2022-29217\nSeverity: HIGH\nPackage: PyJWT\nFixed Version: 2.4.0\nLink: [CVE-2022-29217](https://avd.aquasec.com/nvd/cve-2022-29217)\nPyJWT is a Python implementation of RFC 7519. PyJWT supports multiple different JWT signing algorithms. With JWT, an attacker submitting the JWT token can choose the used signing algorithm. The PyJWT library requires that the application chooses what algorithms are supported. The application can specify `jwt.algorithms.get_default_algorithms()` to get support for all algorithms, or specify a single algorithm. The issue is not that big as `algorithms=jwt.algorithms.get_default_algorithms()` has to be used. Users should upgrade to v2.4.0 to receive a patch for this issue. As a workaround, always be explicit with the algorithms that are accepted and expected when decoding.",
                "markdown": "**Vulnerability CVE-2022-29217**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|PyJWT|2.4.0|[CVE-2022-29217](https://avd.aquasec.com/nvd/cve-2022-29217)|\n\nPyJWT is a Python implementation of RFC 7519. PyJWT supports multiple different JWT signing algorithms. With JWT, an attacker submitting the JWT token can choose the used signing algorithm. The PyJWT library requires that the application chooses what algorithms are supported. The application can specify `jwt.algorithms.get_default_algorithms()` to get support for all algorithms, or specify a single algorithm. The issue is not that big as `algorithms=jwt.algorithms.get_default_algorithms()` has to be used. Users should upgrade to v2.4.0 to receive a patch for this issue. As a workaround, always be explicit with the algorithms that are accepted and expected when decoding."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2017-18342",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "PyYAML: yaml.load() API could execute arbitrary code"
              },
              "fullDescription": {
                "text": "In PyYAML before 5.1, the yaml.load() API could execute arbitrary code if used with untrusted data. The load() function has been deprecated in version 5.1 and the \u0026#39;UnsafeLoader\u0026#39; has been introduced for backward compatibility with the function."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2017-18342",
              "help": {
                "text": "Vulnerability CVE-2017-18342\nSeverity: CRITICAL\nPackage: PyYAML\nFixed Version: 5.1\nLink: [CVE-2017-18342](https://avd.aquasec.com/nvd/cve-2017-18342)\nIn PyYAML before 5.1, the yaml.load() API could execute arbitrary code if used with untrusted data. The load() function has been deprecated in version 5.1 and the 'UnsafeLoader' has been introduced for backward compatibility with the function.",
                "markdown": "**Vulnerability CVE-2017-18342**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|PyYAML|5.1|[CVE-2017-18342](https://avd.aquasec.com/nvd/cve-2017-18342)|\n\nIn PyYAML before 5.1, the yaml.load() API could execute arbitrary code if used with untrusted data. The load() function has been deprecated in version 5.1 and the 'UnsafeLoader' has been introduced for backward compatibility with the function."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2020-14343",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "PyYAML: incomplete fix for CVE-2020-1747"
              },
              "fullDescription": {
                "text": "A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-14343",
              "help": {
                "text": "Vulnerability CVE-2020-14343\nSeverity: CRITICAL\nPackage: PyYAML\nFixed Version: 5.4\nLink: [CVE-2020-14343](https://avd.aquasec.com/nvd/cve-2020-14343)\nA vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.",
                "markdown": "**Vulnerability CVE-2020-14343**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|PyYAML|5.4|[CVE-2020-14343](https://avd.aquasec.com/nvd/cve-2020-14343)|\n\nA vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2019-7164",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-sqlalchemy: SQL Injection when the order_by parameter can be controlled"
              },
              "fullDescription": {
                "text": "SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-7164",
              "help": {
                "text": "Vulnerability CVE-2019-7164\nSeverity: CRITICAL\nPackage: SQLAlchemy\nFixed Version: 1.2.18\nLink: [CVE-2019-7164](https://avd.aquasec.com/nvd/cve-2019-7164)\nSQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.",
                "markdown": "**Vulnerability CVE-2019-7164**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|SQLAlchemy|1.2.18|[CVE-2019-7164](https://avd.aquasec.com/nvd/cve-2019-7164)|\n\nSQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2019-7548",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-sqlalchemy: SQL Injection when the group_by parameter can be controlled"
              },
              "fullDescription": {
                "text": "SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-7548",
              "help": {
                "text": "Vulnerability CVE-2019-7548\nSeverity: HIGH\nPackage: SQLAlchemy\nFixed Version: 1.2.18\nLink: [CVE-2019-7548](https://avd.aquasec.com/nvd/cve-2019-7548)\nSQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.",
                "markdown": "**Vulnerability CVE-2019-7548**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|SQLAlchemy|1.2.18|[CVE-2019-7548](https://avd.aquasec.com/nvd/cve-2019-7548)|\n\nSQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-29361",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": ""
              },
              "fullDescription": {
                "text": "** DISPUTED ** Improper parsing of HTTP requests in Pallets Werkzeug v2.1.0 and below allows attackers to perform HTTP Request Smuggling using a crafted HTTP request with multiple requests included inside the body. NOTE: the vendor\u0026#39;s position is that this behavior can only occur in unsupported configurations involving development mode and an HTTP server from outside the Werkzeug project."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-29361",
              "help": {
                "text": "Vulnerability CVE-2022-29361\nSeverity: CRITICAL\nPackage: Werkzeug\nFixed Version: 2.1.1\nLink: [CVE-2022-29361](https://avd.aquasec.com/nvd/cve-2022-29361)\n** DISPUTED ** Improper parsing of HTTP requests in Pallets Werkzeug v2.1.0 and below allows attackers to perform HTTP Request Smuggling using a crafted HTTP request with multiple requests included inside the body. NOTE: the vendor's position is that this behavior can only occur in unsupported configurations involving development mode and an HTTP server from outside the Werkzeug project.",
                "markdown": "**Vulnerability CVE-2022-29361**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|Werkzeug|2.1.1|[CVE-2022-29361](https://avd.aquasec.com/nvd/cve-2022-29361)|\n\n** DISPUTED ** Improper parsing of HTTP requests in Pallets Werkzeug v2.1.0 and below allows attackers to perform HTTP Request Smuggling using a crafted HTTP request with multiple requests included inside the body. NOTE: the vendor's position is that this behavior can only occur in unsupported configurations involving development mode and an HTTP server from outside the Werkzeug project."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2019-14806",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-werkzeug: insufficient debugger PIN randomness vulnerability"
              },
              "fullDescription": {
                "text": "Pallets Werkzeug before 0.15.3, when used with Docker, has insufficient debugger PIN randomness because Docker containers share the same machine id."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-14806",
              "help": {
                "text": "Vulnerability CVE-2019-14806\nSeverity: HIGH\nPackage: Werkzeug\nFixed Version: 0.15.3\nLink: [CVE-2019-14806](https://avd.aquasec.com/nvd/cve-2019-14806)\nPallets Werkzeug before 0.15.3, when used with Docker, has insufficient debugger PIN randomness because Docker containers share the same machine id.",
                "markdown": "**Vulnerability CVE-2019-14806**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Werkzeug|0.15.3|[CVE-2019-14806](https://avd.aquasec.com/nvd/cve-2019-14806)|\n\nPallets Werkzeug before 0.15.3, when used with Docker, has insufficient debugger PIN randomness because Docker containers share the same machine id."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-43818",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-lxml: HTML Cleaner allows crafted and SVG embedded scripts to pass through"
              },
              "fullDescription": {
                "text": "lxml is a library for processing XML and HTML in the Python language. Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch. There are no known workarounds available."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-43818",
              "help": {
                "text": "Vulnerability CVE-2021-43818\nSeverity: HIGH\nPackage: lxml\nFixed Version: 4.6.5\nLink: [CVE-2021-43818](https://avd.aquasec.com/nvd/cve-2021-43818)\nlxml is a library for processing XML and HTML in the Python language. Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch. There are no known workarounds available.",
                "markdown": "**Vulnerability CVE-2021-43818**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|lxml|4.6.5|[CVE-2021-43818](https://avd.aquasec.com/nvd/cve-2021-43818)|\n\nlxml is a library for processing XML and HTML in the Python language. Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch. There are no known workarounds available."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "8.2",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-2309",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "lxml: NULL Pointer Dereference in lxml"
              },
              "fullDescription": {
                "text": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn\u0026#39;t be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-2309",
              "help": {
                "text": "Vulnerability CVE-2022-2309\nSeverity: HIGH\nPackage: lxml\nFixed Version: 4.9.1\nLink: [CVE-2022-2309](https://avd.aquasec.com/nvd/cve-2022-2309)\nNULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
                "markdown": "**Vulnerability CVE-2022-2309**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|lxml|4.9.1|[CVE-2022-2309](https://avd.aquasec.com/nvd/cve-2022-2309)|\n\nNULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2018-19787",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-lxml: XSS in lxml.html.clean module in lxml/html/clean.py"
              },
              "fullDescription": {
                "text": "An issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by \u0026#34;j a v a s c r i p t:\u0026#34; in Internet Explorer. This is a similar issue to CVE-2014-3146."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-19787",
              "help": {
                "text": "Vulnerability CVE-2018-19787\nSeverity: MEDIUM\nPackage: lxml\nFixed Version: 4.2.5\nLink: [CVE-2018-19787](https://avd.aquasec.com/nvd/cve-2018-19787)\nAn issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by \"j a v a s c r i p t:\" in Internet Explorer. This is a similar issue to CVE-2014-3146.",
                "markdown": "**Vulnerability CVE-2018-19787**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|lxml|4.2.5|[CVE-2018-19787](https://avd.aquasec.com/nvd/cve-2018-19787)|\n\nAn issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by \"j a v a s c r i p t:\" in Internet Explorer. This is a similar issue to CVE-2014-3146."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-27783",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-lxml: mXSS due to the use of improper parser"
              },
              "fullDescription": {
                "text": "A XSS vulnerability was discovered in python-lxml\u0026#39;s clean module. The module\u0026#39;s parser didn\u0026#39;t properly imitate browsers, which caused different behaviors between the sanitizer and the user\u0026#39;s page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-27783",
              "help": {
                "text": "Vulnerability CVE-2020-27783\nSeverity: MEDIUM\nPackage: lxml\nFixed Version: 4.6.2\nLink: [CVE-2020-27783](https://avd.aquasec.com/nvd/cve-2020-27783)\nA XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code.",
                "markdown": "**Vulnerability CVE-2020-27783**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|lxml|4.6.2|[CVE-2020-27783](https://avd.aquasec.com/nvd/cve-2020-27783)|\n\nA XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-28957",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-lxml: Missing input sanitization for formaction HTML5 attributes may lead to XSS"
              },
              "fullDescription": {
                "text": "An XSS vulnerability was discovered in python-lxml\u0026#39;s clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-28957",
              "help": {
                "text": "Vulnerability CVE-2021-28957\nSeverity: MEDIUM\nPackage: lxml\nFixed Version: 4.6.3\nLink: [CVE-2021-28957](https://avd.aquasec.com/nvd/cve-2021-28957)\nAn XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3.",
                "markdown": "**Vulnerability CVE-2021-28957**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|lxml|4.6.3|[CVE-2021-28957](https://avd.aquasec.com/nvd/cve-2021-28957)|\n\nAn XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2016-5851",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "Improper Restriction of XML External Entity Reference in python-docx"
              },
              "fullDescription": {
                "text": "python-docx before 0.8.6 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted document."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2016-5851",
              "help": {
                "text": "Vulnerability CVE-2016-5851\nSeverity: HIGH\nPackage: python-docx\nFixed Version: 0.8.6\nLink: [CVE-2016-5851](https://avd.aquasec.com/nvd/cve-2016-5851)\npython-docx before 0.8.6 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted document.",
                "markdown": "**Vulnerability CVE-2016-5851**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|python-docx|0.8.6|[CVE-2016-5851](https://avd.aquasec.com/nvd/cve-2016-5851)|\n\npython-docx before 0.8.6 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted document."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2018-18074",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-requests: Redirect from HTTPS to HTTP does not remove Authorization header"
              },
              "fullDescription": {
                "text": "The Requests package before 2.20.0 for Python sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-18074",
              "help": {
                "text": "Vulnerability CVE-2018-18074\nSeverity: HIGH\nPackage: requests\nFixed Version: 2.20.0\nLink: [CVE-2018-18074](https://avd.aquasec.com/nvd/cve-2018-18074)\nThe Requests package before 2.20.0 for Python sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network.",
                "markdown": "**Vulnerability CVE-2018-18074**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|requests|2.20.0|[CVE-2018-18074](https://avd.aquasec.com/nvd/cve-2018-18074)|\n\nThe Requests package before 2.20.0 for Python sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2018-20060",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-urllib3: Cross-host redirect does not remove Authorization header allow for credential exposure"
              },
              "fullDescription": {
                "text": "urllib3 before version 1.23 does not remove the Authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the Authorization header to be exposed to unintended hosts or transmitted in cleartext."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-20060",
              "help": {
                "text": "Vulnerability CVE-2018-20060\nSeverity: CRITICAL\nPackage: urllib3\nFixed Version: 1.23\nLink: [CVE-2018-20060](https://avd.aquasec.com/nvd/cve-2018-20060)\nurllib3 before version 1.23 does not remove the Authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the Authorization header to be exposed to unintended hosts or transmitted in cleartext.",
                "markdown": "**Vulnerability CVE-2018-20060**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|urllib3|1.23|[CVE-2018-20060](https://avd.aquasec.com/nvd/cve-2018-20060)|\n\nurllib3 before version 1.23 does not remove the Authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the Authorization header to be exposed to unintended hosts or transmitted in cleartext."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2019-11324",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-urllib3: Certification mishandle when error should be thrown"
              },
              "fullDescription": {
                "text": "The urllib3 library before 1.24.2 for Python mishandles certain cases where the desired set of CA certificates is different from the OS store of CA certificates, which results in SSL connections succeeding in situations where a verification failure is the correct outcome. This is related to use of the ssl_context, ca_certs, or ca_certs_dir argument."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-11324",
              "help": {
                "text": "Vulnerability CVE-2019-11324\nSeverity: HIGH\nPackage: urllib3\nFixed Version: 1.24.2\nLink: [CVE-2019-11324](https://avd.aquasec.com/nvd/cve-2019-11324)\nThe urllib3 library before 1.24.2 for Python mishandles certain cases where the desired set of CA certificates is different from the OS store of CA certificates, which results in SSL connections succeeding in situations where a verification failure is the correct outcome. This is related to use of the ssl_context, ca_certs, or ca_certs_dir argument.",
                "markdown": "**Vulnerability CVE-2019-11324**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|urllib3|1.24.2|[CVE-2019-11324](https://avd.aquasec.com/nvd/cve-2019-11324)|\n\nThe urllib3 library before 1.24.2 for Python mishandles certain cases where the desired set of CA certificates is different from the OS store of CA certificates, which results in SSL connections succeeding in situations where a verification failure is the correct outcome. This is related to use of the ssl_context, ca_certs, or ca_certs_dir argument."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-33503",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-urllib3: ReDoS in the parsing of authority part of URL"
              },
              "fullDescription": {
                "text": "An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-33503",
              "help": {
                "text": "Vulnerability CVE-2021-33503\nSeverity: HIGH\nPackage: urllib3\nFixed Version: 1.26.5\nLink: [CVE-2021-33503](https://avd.aquasec.com/nvd/cve-2021-33503)\nAn issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.",
                "markdown": "**Vulnerability CVE-2021-33503**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|urllib3|1.26.5|[CVE-2021-33503](https://avd.aquasec.com/nvd/cve-2021-33503)|\n\nAn issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2019-11236",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-urllib3: CRLF injection due to not encoding the \u0026#39;\\r\\n\u0026#39; sequence leading to possible attack on internal service"
              },
              "fullDescription": {
                "text": "In the urllib3 library through 1.24.1 for Python, CRLF injection is possible if the attacker controls the request parameter."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-11236",
              "help": {
                "text": "Vulnerability CVE-2019-11236\nSeverity: MEDIUM\nPackage: urllib3\nFixed Version: 1.24.3\nLink: [CVE-2019-11236](https://avd.aquasec.com/nvd/cve-2019-11236)\nIn the urllib3 library through 1.24.1 for Python, CRLF injection is possible if the attacker controls the request parameter.",
                "markdown": "**Vulnerability CVE-2019-11236**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|urllib3|1.24.3|[CVE-2019-11236](https://avd.aquasec.com/nvd/cve-2019-11236)|\n\nIn the urllib3 library through 1.24.1 for Python, CRLF injection is possible if the attacker controls the request parameter."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-26137",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-urllib3: CRLF injection via HTTP request method"
              },
              "fullDescription": {
                "text": "urllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-26137",
              "help": {
                "text": "Vulnerability CVE-2020-26137\nSeverity: MEDIUM\nPackage: urllib3\nFixed Version: 1.25.9\nLink: [CVE-2020-26137](https://avd.aquasec.com/nvd/cve-2020-26137)\nurllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116.",
                "markdown": "**Vulnerability CVE-2020-26137**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|urllib3|1.25.9|[CVE-2020-26137](https://avd.aquasec.com/nvd/cve-2020-26137)|\n\nurllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2013-7459",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "pycrypto: Heap-buffer overflow in ALGobject structure"
              },
              "fullDescription": {
                "text": "Heap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2013-7459",
              "help": {
                "text": "Vulnerability CVE-2013-7459\nSeverity: CRITICAL\nPackage: pycrypto\nFixed Version: \nLink: [CVE-2013-7459](https://avd.aquasec.com/nvd/cve-2013-7459)\nHeap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py.",
                "markdown": "**Vulnerability CVE-2013-7459**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|pycrypto||[CVE-2013-7459](https://avd.aquasec.com/nvd/cve-2013-7459)|\n\nHeap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2018-6594",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "python-crypto: Weak ElGamal key parameters in PublicKey/ElGamal.py allow attackers to obtain sensitive information by reading ciphertext"
              },
              "fullDescription": {
                "text": "lib/Crypto/PublicKey/ElGamal.py in PyCrypto through 2.6.1 generates weak ElGamal key parameters, which allows attackers to obtain sensitive information by reading ciphertext data (i.e., it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for PyCrypto\u0026#39;s ElGamal implementation."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-6594",
              "help": {
                "text": "Vulnerability CVE-2018-6594\nSeverity: HIGH\nPackage: pycrypto\nFixed Version: \nLink: [CVE-2018-6594](https://avd.aquasec.com/nvd/cve-2018-6594)\nlib/Crypto/PublicKey/ElGamal.py in PyCrypto through 2.6.1 generates weak ElGamal key parameters, which allows attackers to obtain sensitive information by reading ciphertext data (i.e., it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for PyCrypto's ElGamal implementation.",
                "markdown": "**Vulnerability CVE-2018-6594**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|pycrypto||[CVE-2018-6594](https://avd.aquasec.com/nvd/cve-2018-6594)|\n\nlib/Crypto/PublicKey/ElGamal.py in PyCrypto through 2.6.1 generates weak ElGamal key parameters, which allows attackers to obtain sensitive information by reading ciphertext data (i.e., it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for PyCrypto's ElGamal implementation."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            }
          ],
          "version": "0.34.0"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-1000656",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: Flask\nInstalled Version: 0.12.2\nVulnerability CVE-2018-1000656\nSeverity: HIGH\nFixed Version: 0.12.3\nLink: [CVE-2018-1000656](https://avd.aquasec.com/nvd/cve-2018-1000656)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: Flask@0.12.2"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1010083",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: Flask\nInstalled Version: 0.12.2\nVulnerability CVE-2019-1010083\nSeverity: HIGH\nFixed Version: 1.0\nLink: [CVE-2019-1010083](https://avd.aquasec.com/nvd/cve-2019-1010083)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: Flask@0.12.2"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-10906",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Package: Jinja2\nInstalled Version: 2.9.6\nVulnerability CVE-2019-10906\nSeverity: HIGH\nFixed Version: 2.10.1\nLink: [CVE-2019-10906](https://avd.aquasec.com/nvd/cve-2019-10906)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: Jinja2@2.9.6"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28493",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Package: Jinja2\nInstalled Version: 2.9.6\nVulnerability CVE-2020-28493\nSeverity: MEDIUM\nFixed Version: 2.11.3\nLink: [CVE-2020-28493](https://avd.aquasec.com/nvd/cve-2020-28493)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: Jinja2@2.9.6"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29217",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Package: PyJWT\nInstalled Version: 1.6.1\nVulnerability CVE-2022-29217\nSeverity: HIGH\nFixed Version: 2.4.0\nLink: [CVE-2022-29217](https://avd.aquasec.com/nvd/cve-2022-29217)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: PyJWT@1.6.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-18342",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Package: PyYAML\nInstalled Version: 3.12\nVulnerability CVE-2017-18342\nSeverity: CRITICAL\nFixed Version: 5.1\nLink: [CVE-2017-18342](https://avd.aquasec.com/nvd/cve-2017-18342)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: PyYAML@3.12"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14343",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Package: PyYAML\nInstalled Version: 3.12\nVulnerability CVE-2020-14343\nSeverity: CRITICAL\nFixed Version: 5.4\nLink: [CVE-2020-14343](https://avd.aquasec.com/nvd/cve-2020-14343)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: PyYAML@3.12"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-7164",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Package: SQLAlchemy\nInstalled Version: 1.1.11\nVulnerability CVE-2019-7164\nSeverity: CRITICAL\nFixed Version: 1.2.18\nLink: [CVE-2019-7164](https://avd.aquasec.com/nvd/cve-2019-7164)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: SQLAlchemy@1.1.11"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-7548",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Package: SQLAlchemy\nInstalled Version: 1.1.11\nVulnerability CVE-2019-7548\nSeverity: HIGH\nFixed Version: 1.2.18\nLink: [CVE-2019-7548](https://avd.aquasec.com/nvd/cve-2019-7548)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: SQLAlchemy@1.1.11"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29361",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Package: Werkzeug\nInstalled Version: 0.14.1\nVulnerability CVE-2022-29361\nSeverity: CRITICAL\nFixed Version: 2.1.1\nLink: [CVE-2022-29361](https://avd.aquasec.com/nvd/cve-2022-29361)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: Werkzeug@0.14.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-14806",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Package: Werkzeug\nInstalled Version: 0.14.1\nVulnerability CVE-2019-14806\nSeverity: HIGH\nFixed Version: 0.15.3\nLink: [CVE-2019-14806](https://avd.aquasec.com/nvd/cve-2019-14806)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: Werkzeug@0.14.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43818",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "Package: lxml\nInstalled Version: 4.2.1\nVulnerability CVE-2021-43818\nSeverity: HIGH\nFixed Version: 4.6.5\nLink: [CVE-2021-43818](https://avd.aquasec.com/nvd/cve-2021-43818)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: lxml@4.2.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2309",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "Package: lxml\nInstalled Version: 4.2.1\nVulnerability CVE-2022-2309\nSeverity: HIGH\nFixed Version: 4.9.1\nLink: [CVE-2022-2309](https://avd.aquasec.com/nvd/cve-2022-2309)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: lxml@4.2.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-19787",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Package: lxml\nInstalled Version: 4.2.1\nVulnerability CVE-2018-19787\nSeverity: MEDIUM\nFixed Version: 4.2.5\nLink: [CVE-2018-19787](https://avd.aquasec.com/nvd/cve-2018-19787)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: lxml@4.2.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-27783",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Package: lxml\nInstalled Version: 4.2.1\nVulnerability CVE-2020-27783\nSeverity: MEDIUM\nFixed Version: 4.6.2\nLink: [CVE-2020-27783](https://avd.aquasec.com/nvd/cve-2020-27783)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: lxml@4.2.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28957",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Package: lxml\nInstalled Version: 4.2.1\nVulnerability CVE-2021-28957\nSeverity: MEDIUM\nFixed Version: 4.6.3\nLink: [CVE-2021-28957](https://avd.aquasec.com/nvd/cve-2021-28957)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: lxml@4.2.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-5851",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "Package: python-docx\nInstalled Version: 0.8.5\nVulnerability CVE-2016-5851\nSeverity: HIGH\nFixed Version: 0.8.6\nLink: [CVE-2016-5851](https://avd.aquasec.com/nvd/cve-2016-5851)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: python-docx@0.8.5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-18074",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "Package: requests\nInstalled Version: 2.18.1\nVulnerability CVE-2018-18074\nSeverity: HIGH\nFixed Version: 2.20.0\nLink: [CVE-2018-18074](https://avd.aquasec.com/nvd/cve-2018-18074)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: requests@2.18.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20060",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "Package: urllib3\nInstalled Version: 1.21.1\nVulnerability CVE-2018-20060\nSeverity: CRITICAL\nFixed Version: 1.23\nLink: [CVE-2018-20060](https://avd.aquasec.com/nvd/cve-2018-20060)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: urllib3@1.21.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11324",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Package: urllib3\nInstalled Version: 1.21.1\nVulnerability CVE-2019-11324\nSeverity: HIGH\nFixed Version: 1.24.2\nLink: [CVE-2019-11324](https://avd.aquasec.com/nvd/cve-2019-11324)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: urllib3@1.21.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33503",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Package: urllib3\nInstalled Version: 1.21.1\nVulnerability CVE-2021-33503\nSeverity: HIGH\nFixed Version: 1.26.5\nLink: [CVE-2021-33503](https://avd.aquasec.com/nvd/cve-2021-33503)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: urllib3@1.21.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11236",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "Package: urllib3\nInstalled Version: 1.21.1\nVulnerability CVE-2019-11236\nSeverity: MEDIUM\nFixed Version: 1.24.3\nLink: [CVE-2019-11236](https://avd.aquasec.com/nvd/cve-2019-11236)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: urllib3@1.21.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-26137",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "Package: urllib3\nInstalled Version: 1.21.1\nVulnerability CVE-2020-26137\nSeverity: MEDIUM\nFixed Version: 1.25.9\nLink: [CVE-2020-26137](https://avd.aquasec.com/nvd/cve-2020-26137)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "app/requirements.txt: urllib3@1.21.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-7459",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "Package: pycrypto\nInstalled Version: 2.6.1\nVulnerability CVE-2013-7459\nSeverity: CRITICAL\nFixed Version: \nLink: [CVE-2013-7459](https://avd.aquasec.com/nvd/cve-2013-7459)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "library/requirements.txt: pycrypto@2.6.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-6594",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "Package: pycrypto\nInstalled Version: 2.6.1\nVulnerability CVE-2018-6594\nSeverity: HIGH\nFixed Version: \nLink: [CVE-2018-6594](https://avd.aquasec.com/nvd/cve-2018-6594)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "library/requirements.txt: pycrypto@2.6.1"
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      }
    }
  ]
}